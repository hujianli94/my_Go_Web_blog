.. contents::
   :depth: 3
..

Go RPC编程
==========

1.什么是RPC
-----------

远程过程调用（Remote Procedure Call，缩写为 RPC）是一个计算机通信协议。
该协议允许运行于一台计算机的程序调用另一台计算机的子程序，而程序员无需额外地为这个交互作用编程。
如果涉及的软件采用面向对象编程，那么远程过程调用亦可称作远程调用或远程方法调用。\ `维基百科：远程过程调用 <https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki/%E9%81%A0%E7%A8%8B%E9%81%8E%E7%A8%8B%E8%AA%BF%E7%94%A8>`__

用通俗易懂的语言描述就是：RPC允许跨机器、跨语言调用计算机程序方法。打个比方，我用go语言写了个获取用户信息的方法getUserInfo，并把go程序部署在阿里云服务器上面，现在我有一个部署在腾讯云上面的php项目，需要调用golang的getUserInfo方法获取用户信息，php跨机器调用go方法的过程就是RPC调用。

2.golang中如何实现RPC
---------------------

在golang中实现RPC非常简单，有封装好的官方库和一些第三方库提供支持。

Go
RPC可以利用tcp或http来传递数据，可以对要传递的数据使用多种类型的编解码方式。

-  gob编码RPC
-  Json编码RPC
-  其他三方RPC库

golang官方的\ ``net/rpc``\ 库使用\ ``encoding/gob``\ 进行编解码，支持\ ``tcp``\ 或\ ``http``\ 数据传输方式，由于其他语言不支持\ ``gob``\ 编解码方式，\ **所以使用\ ``net/rpc``\ 库实现的RPC方法没办法进行跨语言调用。**

golang官方还提供了\ ``net/rpc/jsonrpc``\ 库实现RPC方法，JSON
RPC采用JSON进行数据编解码，因而支持跨语言调用。但目前的jsonrpc库是基于tcp协议实现的，暂时不支持使用http进行数据传输。

除了golang官方提供的rpc库，还有许多第三方库为在golang中实现RPC提供支持，大部分第三方rpc库的实现都是使用\ ``protobuf``\ 进行数据编解码，根据\ ``protobuf``\ 声明文件自动生成rpc方法定义与服务注册代码，在golang中可以很方便的进行rpc服务调用。

2.1 gob编码RPC
~~~~~~~~~~~~~~

``server/main.go``

.. code:: go

   package main

   import (
       "fmt"
       "net/http"
       "net/rpc"
   )

   type Algorithm int

   //参数结构体
   type Args struct {
       X, Y int
   }

   //参数结构体
   //type Response int

   //定义一个方法求两个数的和
   //该方法的第一个参数为输入参数，第二个参数为返回值
   func (t *Algorithm) Sum(args *Args, reply *int) error {
       *reply = args.X + args.Y
       fmt.Println("Exec Sum ", reply)
       return nil
   }

   func main() {
       //实例化
       algorithm := new(Algorithm)
       fmt.Println("Algorithm start", algorithm)
       //注册服务
       rpc.Register(algorithm)
       rpc.HandleHTTP()
       if err := http.ListenAndServe(":8808", nil); err != nil {
           fmt.Println("err=====", err.Error())
       }
   }

``client/main.go``

.. code:: go

   package main

   import (
       "fmt"
       "log"
       "net/rpc"
       "os"
       "strconv"
   )

   //参数结构体
   type ArgsTwo struct {
       X, Y int
   }

   func main() {
       client, err := rpc.DialHTTP("tcp", "127.0.0.1:8808")
       if err != nil {
           log.Fatal("在这里地方发生错误了: DialHTTP", err)
       }
       //获取第一个输入值
       i1, _ := strconv.Atoi(os.Args[1])
       //获取第二个输入值
       i2, _ := strconv.Atoi(os.Args[2])
       args := ArgsTwo{i1, i2}
       var reply int
       //调用命名函数，等待它完成，并返回其错误状态。
       err = client.Call("Algorithm.Sum", args, &reply)
       if err != nil {
           log.Fatal("Call Sum algorithm error:", err)
       }
       fmt.Printf("Algorithm 和为: %d+%d=%d\n", args.X, args.Y, reply)
   }

2.3 Json编码RPC
~~~~~~~~~~~~~~~

``server/main.go``

.. code:: go

   package main

   import (
       "fmt"
       "net"
       "net/rpc"
       "net/rpc/jsonrpc"
   )

   //使用Go提供的net/rpc/jsonrpc标准包
   func init() {
       fmt.Println("JSON编码RPC,不是gob编码,其他的和RPC概念一模一样。")
   }

   type ArgsLanguage struct {
       Java, Go string
   }

   type Programmer string

   func (m *Programmer) GetSkill(al *ArgsLanguage, skill *string) error {
       *skill = "Skill1:" + al.Java + ",Skill2:" + al.Go
       return nil
   }

   func main() {
       //实例化
       str := new(Programmer)
       //注册服务
       rpc.Register(str)

       tcpAddr, err := net.ResolveTCPAddr("tcp", ":8085")
       if err != nil {
           fmt.Println("ResolveTCPAddr err=", err)
       }

       listener, err := net.ListenTCP("tcp", tcpAddr)
       if err != nil {
           fmt.Println("tcp listen err=", err)
       }

       for {
           conn, err := listener.Accept()
           if err != nil {
               continue
           }
           jsonrpc.ServeConn(conn)
       }
   }

``client/main.go``

.. code:: go

   package main

   import (
       "fmt"
       "log"
       "net/rpc/jsonrpc"
   )

   // 参数结构体可以和服务端不一样
   // 但是结构体里的字段必须一样
   type Send struct {
       Java, Go string
   }

   func main() {
       fmt.Println("client start......")
       client, err := jsonrpc.Dial("tcp", "127.0.0.1:8085")
       if err != nil {
           log.Fatal("Dial err=", err)
       }
       send := Send{"Java", "Go"}
       var receive string
       err = client.Call("Programmer.GetSkill", send, &receive)
       if err != nil {
           fmt.Println("Call err=", err)
       }
       fmt.Println("receive", receive)
   }
