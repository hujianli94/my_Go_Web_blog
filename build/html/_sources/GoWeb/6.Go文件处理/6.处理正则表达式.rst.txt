.. role:: raw-latex(raw)
   :format: latex
..

.. contents::
   :depth: 3
..

处理正则表达式
==============

1.正则表达式简介
----------------

正则表达式特点：

1. 灵活性、逻辑性和功能性非常强。
2. 简单方式实现字符串的复杂控制。
3. 晦涩难懂。

正则表达式提高文本处理能力，用于表单输入验证、文本提取、数据分析等。

正则表达式由普通字符（\ ``a~z``\ 、\ ``A~Z``\ 、\ ``0~9``\ 等）和特殊字符（元字符）组成。

1.1 普通字符
~~~~~~~~~~~~

普通字符包括大小写字母、数字、标点符号和其他符号。普通字符包括可打印字符和非打印字符（计算机中存在但不能够显示或打印的字符）。

+----------------------------------+----------------------------------+
| 非打印字符                       | 描述                             |
+==================================+==================================+
| :raw-latex:`\f |`                |                                  |
| 换页符，等价于:raw-              |                                  |
| latex:`\x`0c和:raw-latex:`\cL`。 |                                  |
+----------------------------------+----------------------------------+
| :raw-latex:`\n`                  | 换行符，等价于:raw-              |
|                                  | latex:`\x`0a和:raw-latex:`\cJ`。 |
+----------------------------------+----------------------------------+
| :raw-latex:`\r |`                |                                  |
| 回车符，等价于:raw-              |                                  |
| latex:`\x`0d和:raw-latex:`\cM`。 |                                  |
+----------------------------------+----------------------------------+
| :raw-latex:`\s`                  | 任意空白字符（空格、制           |
|                                  | 表符、换页符等），等价于[:raw-la |
|                                  | tex:`\r\n`:raw-latex:`\r\t\v]`。 |
+----------------------------------+----------------------------------+
| :raw-latex:`\S`                  | 任意非空白字符（空格、制表符、换 |
|                                  | 页符等），等价于[^\r\n\r\t\v]。  |
+----------------------------------+----------------------------------+
| :raw-latex:`\t |`                |                                  |
| 制表符，等价于:raw-              |                                  |
| latex:`\x`09和:raw-latex:`\cl`。 |                                  |
+----------------------------------+----------------------------------+
| :raw-latex:`\v |`                |                                  |
| 垂直制表符，等价于:raw-          |                                  |
| latex:`\x`0b和:raw-latex:`\cK`。 |                                  |
+----------------------------------+----------------------------------+

1.2 特殊字符
~~~~~~~~~~~~

特殊含义的字符。匹配特殊字符，必须转义()。

+----------+----------------------------------------------------------+
| 特殊字符 | 描述                                                     |
+==========+==========================================================+
| $        | 字符串结尾，若设置RegExp的Mult                           |
|          | iline属性，$也匹配“:raw-latex:`\n`”或":raw-latex:`\r"`。 |
+----------+----------------------------------------------------------+
| ()       | 子表达式的开始和结束。                                   |
+----------+----------------------------------------------------------+
| \*       | 零或多。                                                 |
+----------+----------------------------------------------------------+
| +        | 一或多。                                                 |
+----------+----------------------------------------------------------+
| .        | 除“:raw-latex:`\n`”外任意单字符。                        |
+----------+----------------------------------------------------------+
| [        | 标记中括号表达式的开始。                                 |
+----------+----------------------------------------------------------+
| ?        | 零或一，或指明非贪婪限定符。                             |
+----------+----------------------------------------------------------+
| \\       | 将下一                                                   |
|          | 个字符标记为特殊字符、原义字符、向后引用、八进制转义符。 |
+----------+----------------------------------------------------------+
| ^        | 字符串开始，方括号表达式中使用表示取反。                 |
+----------+----------------------------------------------------------+
| {        | 标记限定符表达式的开始。                                 |
+----------+----------------------------------------------------------+
| \|       | 选择。                                                   |
+----------+----------------------------------------------------------+

1.3 限定符
~~~~~~~~~~

限定给定组件必须出现多少次。

====== ======================
限定符 描述
====== ======================
\*     零或多，等价于{0,}。
+      一或多，等价于{1,}。
?      零或一，等价于{0,1}。
{n}    n。
{n,}   大于等于n。
{n,m}  大于等于n，小于等于m。
====== ======================

::

   Chapter [1-9][0-9]*

\*、+、?默认贪婪，后面加?实现非贪婪或最小匹配。

::

   <.*>        // 贪婪匹配
   <.*?>       // 非贪婪匹配

1.4 定位符
~~~~~~~~~~

+----------------------------------+----------------------------------+
| 定位符                           | 描述                             |
+==================================+==================================+
| ^                                | 字符串开始，若设置RegE           |
|                                  | xp的Multiline属性，^也匹配“:raw- |
|                                  | latex:`\n`”或":raw-latex:`\r"`。 |
+----------------------------------+----------------------------------+
| $                                | 字符串结尾，若设置RegE           |
|                                  | xp的Multiline属性，$也匹配“:raw- |
|                                  | latex:`\n`”或":raw-latex:`\r"`。 |
+----------------------------------+----------------------------------+
| :raw-latex:`\b|`                 |                                  |
| 字边界，即字与空格间的位置。     |                                  |
+----------------------------------+----------------------------------+
| :raw-latex:`\B`                  | 非字边界。                       |
+----------------------------------+----------------------------------+

…….. 其他一些省略

（5）选择 （6）反向引用 （7）运算符优先级

2.使用Go正则表达式
------------------

参考标准库文档：

https://studygolang.com/pkgdoc

https://zhuanlan.zhihu.com/p/396375666

2.1 regexp包的常用函数
~~~~~~~~~~~~~~~~~~~~~~

1.获取正则对象
^^^^^^^^^^^^^^

.. code:: go

   func Compile(expr string) (*Regexp, error)
   func MustCompile(str string) *Regexp

MustCompile()函数失败会宕机。

::

   reg, err := regexp.Compile(`\d+`)
   reg := regexp.MustCompile(`\d+`)

2.匹配检测
^^^^^^^^^^

.. code:: go

   func (re *Regexp) MatchString(s string) bool
   func (re *Regexp) Match(b []byte) bool

.. code:: go

   package main

   import (
       "fmt"
       "regexp"
   )

   func main() {
       text := "Hello Gopher, Hello Go Web"
       reg := regexp.MustCompile(`\w+`)
       fmt.Println(reg.MatchString(text)) //true

       match, _ := regexp.MatchString("H(.*)d!", "Hello World!")
       fmt.Println(match) //true

       match, _ = regexp.Match("H(.*)d!", []byte("Hello World!"))
       fmt.Println(match) //true

       r, _ := regexp.Compile("H(.*)d!")
       fmt.Println(r.MatchString("Hello World!")) //true

   }

3.查找
^^^^^^

.. code:: go

   func (re *Regexp) FindString(s string) string       //返回左侧第一个匹配结果。

.. code:: go

   func (re *Regexp) FindAllString(s string, n int) []string   //n限定查找数量，-1不限制。

.. code:: go

   package main

   import (
       "fmt"
       "regexp"
   )

   func main() {
       text := "Hello Gopher, Hello Go Web"
       reg := regexp.MustCompile(`\w+`)
       fmt.Println(reg.FindAllString(text, -1))

   }

.. code:: go

   func (re *Regexp) FindAll(b []byte, n int) [][]byte

……

（4）查找匹配位置 （5）替换 （6）分割

3. regexp包的应用示例
---------------------

``phone.go``

.. code:: go

   package main

   import (
       "fmt"
       "regexp"
   )

   func main() {
       res2 := findPhoneNumber("13688888888")
       fmt.Println(res2) // true

       res2 = findPhoneNumber("02888888888")
       fmt.Println(res2) // false

       res2 = findPhoneNumber("123456789")
       fmt.Println(res2) // false
   }

   func findPhoneNumber(str string) bool {
       // 创建一个正则表达式匹配规则对象
       reg := regexp.MustCompile("^1[1-9]{10}")
       // 利用正则表达式匹配规则对象匹配指定字符串
       res := reg.FindAllString(str, -1)
       if res == nil {
           return false
       }
       return true
   }

``email.go``

.. code:: go

   package main

   import (
       "fmt"
       "regexp"
   )

   func main() {
       res := findEmail("8888@qq.com")
       fmt.Println(res) // true

       res = findEmail("shir?don@qq.com")
       fmt.Println(res) // false

       res = findEmail("8888@qqcom")
       fmt.Println(res) // false
   }
   func findEmail(str string) bool {
       reg := regexp.MustCompile("^[a-zA-Z0-9_]+@[a-zA-Z0-9]+\\.[a-zA-Z0-9]+")
       res := reg.FindAllString(str, -1)
       if res == nil {
           return false
       }
       return true
   }

4. 根据正则表达式生产代码
-------------------------

在线版

https://regex101.com/
