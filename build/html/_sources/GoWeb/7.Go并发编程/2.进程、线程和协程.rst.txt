.. contents::
   :depth: 3
..

进程、线程和协程
================

1.进程（Process）
-----------------

运行中的可执行程序。

2.线程（Thread）
----------------

轻量级进程（Lightweight Process，LWP），程序执行流的最小单位。

由线程ID、当前指令指针（PC）、寄存器集合和堆栈组成。

**线程是进程的一个实体，与同属同一进程的其他线程共享进程的全部资源。**

线程拥有独立栈，共享堆。

线程具有5种状态：\ *初始化、可运行、运行中、阻塞、销毁。*

线程和进程都由操作系统管理。

   线程是最小的执行单元，进程是最小的资源管理单元。

3.协程（Coroutines）
--------------------

协程是比线程更加轻量级的一种特殊函数。协程不是操作系统内核管理，而是程序控制，即在用户态执行。提升性能，不会像线程切换那样消耗资源。

**一个进程可以包含多个线程，一个线程可以包含多个协程。**

**一个线程中的多个协程始终是串行的（函数都是串行运行），无论CPU多少核。**

4.对比
------

-  协程仅是特殊函数，与线程和进程不是一个维度。
-  一个进程可以包含多个线程，一个线程可以包含多个协程。
-  一个线程内的多个协程可以切换，但协程始终是串行执行，无法利用CPU的多核能力。
-  进程由操作系统自己的切换策略来切换，用户无感。切换内容包括页全局目录、内核栈和硬件上下文，切换内容被保存在内存中。采用“从用户态到内核态再到用户态”的方式，切换效率低。
-  线程由操作系统自己的切换策略来切换，用户无感。切换内容包括内核栈和硬件上下文，切换内容被保存在内核栈中。采用“从用户态到内核态再到用户态”的方式，切换效率中等。
-  协程的切换由用户（编程者或应用程序）决定。切换内容包括硬件上下文，切换内容被保存在用户自己的变量（用户栈或堆）中。只有“用户态”，切换效率高。

.. _进程线程和协程-1:

5.进程、线程和协程
------------------

进程（process）：程序在操作系统中的一次执行过程，系统进行资源分配和调度的一个独立单位。

线程（thread）：操作系统基于进程开启的轻量级进程，是操作系统调度执行的最小单位。

协程（coroutine）：非操作系统提供而是由用户自行创建和控制的用户态‘线程’，比线程更轻量级。
