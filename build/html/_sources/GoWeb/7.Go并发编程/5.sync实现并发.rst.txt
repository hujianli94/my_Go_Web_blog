.. contents::
   :depth: 3
..

sync实现并发
============

1.竞态
------

使用并发，可能产生数据争用的竞态问题。

.. code:: go

   package main

   import (
       "fmt"
       "sync"
   )

   var x int64
   var wg sync.WaitGroup

   func add() {
       for i := 0; i < 5000; i++ {
           x = x + 1
       }
       wg.Done()
   }
   func main() {
       wg.Add(2)
       go add()
       go add()
       wg.Wait()
       fmt.Println(x)
   }

上面的代码中我们开启了两个goroutine去累加变量x的值，这两个goroutine在访问和修改x变量的时候就会存在数据竞争，导致最后的结果与期待的不符。

2.互斥锁
--------

互斥锁是一种常用的控制共享资源访问的方法，它能够保证同时只有一个goroutine可以访问共享资源。Go语言中使用sync包的Mutex类型来实现互斥锁。
使用互斥锁来修复上面代码的问题：

.. code:: go

   package main

   import (
       "fmt"
       "sync"
   )

   var x int64
   var wg sync.WaitGroup
   var lock sync.Mutex

   func add() {
       for i := 0; i < 5000; i++ {
           lock.Lock() // 加锁
           x = x + 1
           lock.Unlock() // 解锁
       }
       wg.Done()
   }
   func main() {
       wg.Add(2)
       go add()
       go add()
       wg.Wait()
       fmt.Println(x)
   }

使用互斥锁能够保证同一时间有且只有一个goroutine进入临界区，其他的goroutine则在等待锁；当互斥锁释放后，等待的goroutine才可以获取锁进入临界区，多个goroutine同时等待一个锁时，唤醒的策略是随机的。

sync.Mutex，用于实现互斥锁，用于读写不确定的场景，全局锁。

.. code:: go

   type Mutex struct {
       state int32 //当前互斥锁的状态
       sema uint32 //控制锁状态的信号量
   }

   func (m *Mutex) Lock()
   func (m *Mutex) Unlock()

必须先Lock()，然后Unlock()。 连续Lock()，死锁。
先Unlock()，后Lock()，panic。
可以一个goroutine先Lock()，其他goroutine后Unlock()。

.. code:: go

   package main

   import (
       "fmt"
       "sync"
       "time"
   )

   // 互斥锁性能测试：比较适合于读多、写少的情况
   func main() {
       ch := make(chan struct{}, 2)
       var l sync.Mutex
       go func() {
           fmt.Println("groutine2: 等待解锁")
           l.Lock()
           fmt.Println("groutine2: 已经加锁了")
           defer l.Unlock()
           fmt.Println("goroutine2: 欧耶，我也解锁了")
           ch <- struct{}{}
       }()
       go func() {
           l.Lock()
           fmt.Println("groutine1: 已经加锁了")
           defer l.Unlock()
           fmt.Println("goroutine1: 我会锁定大概 2s")
           time.Sleep(time.Second * 2)
           fmt.Println("goroutine1: 我解锁了，你们去抢吧")
           ch <- struct{}{}
       }()
       // 等待 goroutine 执行结束
       for i := 0; i < 2; i++ {
           <-ch
       }
   }

3.读写互斥锁
------------

互斥锁是完全互斥的，但是有很多实际的场景下是读多写少的，当我们并发的去读取一个资源不涉及资源修改的时候是没有必要加锁的，这种场景下使用读写锁是更好的一种选择。读写锁在Go语言中使用sync包中的RWMutex类型。

读写锁分为两种：读锁和写锁。当一个goroutine获取读锁之后，其他的goroutine如果是获取读锁会继续获得锁，如果是获取写锁就会等待；当一个goroutine获取写锁之后，其他的goroutine无论是获取读锁还是写锁都会等待。

读写锁示例：

.. code:: go

   type RWMutex struct {
       w           Mutex  // held if there are pending writers
       writerSem   uint32 // semaphore for writers to wait for completing readers
       readerSem   uint32 // semaphore for readers to wait for completing writers
       readerCount int32  // number of pending readers
       readerWait  int32  // number of departing readers
   }

   //写操作
   func (*RWMutex) Lock()
   func (*RWMutex) Unlock()

   //读操作
   func (*RWMutex) RLock()
   func (*RWMutex) RUnlock()

.. code:: go

   package main

   import (
       "fmt"
       "sync"
       "time"
   )

   var (
       r      int64
       w      int64
       wg     sync.WaitGroup
       lock   sync.Mutex
       rwlock sync.RWMutex
   )

   func write() {
       // lock.Lock()   // 加互斥锁
       rwlock.Lock() // 加写锁
       w = w + 1
       fmt.Printf("write rlock num: %d\n", w)
       time.Sleep(10 * time.Millisecond) // 假设读操作耗时10毫秒
       rwlock.Unlock()                   // 解写锁
       // lock.Unlock()                     // 解互斥锁
       wg.Done()
   }

   func read() {
       // lock.Lock()                  // 加互斥锁
       rwlock.RLock() // 加读锁
       r = r + 1
       fmt.Printf("read rlock num: %d\n", r)
       time.Sleep(time.Millisecond) // 假设读操作耗时1毫秒
       rwlock.RUnlock()             // 解读锁
       // lock.Unlock()                // 解互斥锁
       wg.Done()
   }

   func main() {
       start := time.Now()
       for i := 0; i < 10; i++ {
           wg.Add(1)
           go write()
       }

       for i := 0; i < 1000; i++ {
           wg.Add(1)
           go read()
       }

       wg.Wait()
       end := time.Now()
       fmt.Println(end.Sub(start))
   }

需要注意的是读写锁非常适合读多写少的场景，如果读和写的操作差别不大，读写锁的优势就发挥不出来。

.. code:: go

   package main

   import (
       "fmt"
       _ "math/rand"
       "sync"
   )

   var count int
   var rw sync.RWMutex

   func main() {
       ch := make(chan struct{}, 6)

       for i := 0; i < 50; i++ {
           go ReadCount(i, ch)
       }

       for i := 0; i < 10; i++ {
           go WriteCount(i, ch)
       }

       for i := 0; i < 60; i++ {
           <-ch
       }
   }

   func ReadCount(n int, ch chan struct{}) {
       rw.RLock()
       fmt.Printf("goroutine %d 进入读操作...\n", n)
       v := count
       fmt.Printf("goroutine %d 读取结束，值为：%d\n", n, v)
       rw.RUnlock()
       ch <- struct{}{}
   }

   func WriteCount(n int, ch chan struct{}) {
       rw.Lock()
       fmt.Printf("goroutine %d 进入写操作...\n", n)
       // v := rand.Intn(10)
       v := count + 1
       count = v
       fmt.Printf("goroutine %d 写入结束，值为：%d\n", n, v)
       rw.Unlock()
       ch <- struct{}{}
   }

4.sync.Once结构体
-----------------

在编程的很多场景下我们需要确保某些操作在高并发的场景下只执行一次，例如只加载一次配置文件、只关闭一次通道等。

Go语言中的sync包中提供了一个针对只执行一次场景的解决方案–sync.Once。

sync.Once只有一个Do方法，其签名如下：

.. code:: go

   func (o *Once) Do(f func()) {} 

..

   注意：如果要执行的函数f需要传递参数就需要搭配闭包来使用。

多次调用\ ``sync.Once.Do(f func())``\ ，只执行第一次调用的函数。

.. code:: go

   type Once struct {
       done uint32
       m Mutex
   }

   func (o *Once) Do(f func())

.. code:: go

   package main

   import (
       "fmt"
       "sync"
   )

   func main() {
       var once sync.Once
       onceBody := func() {
           fmt.Println("test only once,这里只打印一次！") //打印
       }
       done := make(chan bool)
       for i := 0; i < 6; i++ {
           go func() {
               // onceBody()       // 此时会打印6次
               once.Do(onceBody) //确保只执行一次
               done <- true
           }()
       }
       for i := 0; i < 6; i++ {
           <-done
       }
   }

.. code:: go

   var icons map[string]image.Image

   var loadIconsOnce sync.Once

   func loadIcons() {
       icons = map[string]image.Image{
           "left":  loadIcon("left.png"),
           "up":    loadIcon("up.png"),
           "right": loadIcon("right.png"),
           "down":  loadIcon("down.png"),
       }
   }

   // Icon 是并发安全的
   func Icon(name string) image.Image {
       loadIconsOnce.Do(loadIcons)
       return icons[name]
   }

sync.Once其实内部包含一个互斥锁和一个布尔值，互斥锁保证布尔值和数据的安全，而布尔值用来记录初始化是否完成。这样设计就能保证初始化操作的时候是并发安全的并且初始化操作也不会被执行多次。

5.同步等待组sync.WaitGroup
--------------------------

用于等待一组线程的结束。

.. code:: go

   func (*WaitGroup) Add(int)

   func (w *WaitGroup) Done() {
       w.Add(-1)
   }

   func (*WaitGroup) Wait()

.. code:: go

   package main

   import (
       "fmt"
       "sync"
   )

   var wg sync.WaitGroup

   func hello() {
       defer wg.Done()
       fmt.Println("Hello Goroutine!")
   }
   func main() {
       wg.Add(1)
       go hello() // 启动另外一个goroutine去执行hello函数
       fmt.Println("main goroutine done!")
       wg.Wait()
   }

.. code:: go

   package main

   import (
       "fmt"
       "sync"
       "time"
   )

   func main() {
       var wg sync.WaitGroup

       wg.Add(1)
       go func() {
           defer wg.Done()
           fmt.Println("1 goroutine sleep ...")
           time.Sleep(2)
           fmt.Println("1 goroutine exit ...")
       }()

       wg.Add(1)
       go func() {
           defer wg.Done()
           fmt.Println("2 goroutine sleep ...")
           time.Sleep(4)
           fmt.Println("2 goroutine exit ...")
       }()

       fmt.Println("Waiting for all goroutine ")
       wg.Wait()
       fmt.Println("All goroutines finished!")
   }

.. code:: go

   package main

   import (
       "fmt"
       "sync"
       "time"
   )

   func main() {
       testFunc := func(wg *sync.WaitGroup, id int) {
           defer wg.Done()
           fmt.Printf("%v goroutine start ...\n", id)
           time.Sleep(2)
           fmt.Printf("%v goroutine exit ...\n", id)
       }

       var wg sync.WaitGroup
       const N = 3
       wg.Add(N)
       for i := 0; i < N; i++ {
           go testFunc(&wg, i)
       }

       fmt.Println("Waiting for all goroutine")
       wg.Wait()
       fmt.Println("All goroutines finished!")
   }

6.竞态检测器
------------

竞态分析工具。

::

   go build -race main.go
   go run -race main.go
   go test -race test_main.go

.. code:: go

   package main

   import "fmt"

   func main() {
       c := make(chan bool)
       m := make(map[string]string)
       go func() {
           m["a"] = "one" // 第一个冲突访问.
           c <- true
       }()
       m["b"] = "two" // 第一个冲突访问
       <-c
       for k, v := range m {
           fmt.Println(k, v)
       }
   }
