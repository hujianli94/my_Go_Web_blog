.. contents::
   :depth: 3
..

Go并发模型简介
==============

1.多线程共享内存模型
--------------------

访问共享数据（数组、map、结构体或对象等）时，通过锁来访问。衍生出线程安全的数据结构，Go通过sync包来实现。

2.CSP（Communicating Sequential Processes）并发模型
---------------------------------------------------

CSP并发模型理念是不通过共享内存来通信，而是通过通信来共享内存。

Go通过goroutine和通道（channel）来实现。goroutine时并发执行单位，类似协程。通道是goroutine间的通信管道，类似UNIX中的管道。

.. code:: go

   package main

   import (
       "fmt"
   )

   func main() {
       ch := make(chan string) // 构建一个通道

       go func() { // 开启一个并发匿名函数
           fmt.Println("开始协程") // 通过通道通知main的协程
           ch <- "signal"
           fmt.Println("退出协程")
       }()

       fmt.Println("等待协程")
       <-ch // 等待匿名协程
       fmt.Println("完成")
   }

3. 常见的并发模型
-----------------

业界将如何实现并发编程总结归纳为各式各样的并发模型，常见的并发模型有以下几种：

-  线程&锁模型
-  Actor模型
-  CSP模型
-  Fork&Join模型

Go语言中的并发程序主要是通过基于CSP（communicating sequential
processes）的goroutine和channel来实现，当然也支持使用传统的多线程共享内存的并发方式。
