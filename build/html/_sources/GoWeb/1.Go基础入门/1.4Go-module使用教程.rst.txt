.. contents::
   :depth: 3
..

Go Module使用教程
=================

1.前言
------

随着Go 1.13发布，GOPROXY默认值proxy.golang.org在中国大陆不能被访问。
七牛云顺势推出goproxy.cn，以利于中国开发者更好使用Go Modules。

Gitee GoProxy仓使用帮助 代理上游

::

   https://goproxy.cn/
   https://goproxy.io/

1.1使用方法
~~~~~~~~~~~

::

   #Go 1.13 及以上
   go env -w GO111MODULE=on
   go env -w GOPROXY=http://mirrors.gitee.com/repository/go-public/
   go env -w GOSUMDB=off
   #or
   export GOPROXY=http://mirrors.gitee.com/repository/go-public/


   测试
   #test
   go get github.com/valyala/fasthttp

1.2详细步骤
~~~~~~~~~~~

（1）升级到Go1.13

（2）运行go env -w GO111MODULE=on

（3）运行go env -w GOPROXY=https://goproxy.cn,direct
``可以通过运行go env查看``

（4）在项目根目录下执行\ ``go mod init``\ 执行成功后生成go.mod文件

1.3其他指令
~~~~~~~~~~~

::

   go get -u               //更新现有的依赖
   go mod tidy             //整理模块（拉取缺少的模块，移除不用的模块）
   go mod download         //下载依赖包
   go mod graph            //打印现有依赖结构
   go mod vendor           //将依赖复制到vendor下
   go mod verify           //校验依赖

1.4 go.mod文件解析
~~~~~~~~~~~~~~~~~~

::

   module：     //模块名称，使用指令go mod init <OPTIONAL_MODULE_PATH>可设置
   require：        //依赖包列表以及版本
   exclude：        //禁用依赖包列表
   replace：        //替换依赖包列表
   go：         //go版本号

2.使用go module导入本地包
-------------------------

``go module``\ 是Go1.11版本之后官方推出的版本管理工具，并且从\ ``Go1.13``\ 版本开始，\ ``go module``\ 将是Go语言默认的依赖管理工具。到今天\ ``Go1.14``\ 版本推出之后\ ``Go modules``
功能已经被正式推荐在生产环境下使用了。

这几天已经有很多教程讲解如何使用\ ``go module``\ ，以及如何使用\ ``go module``\ 导入gitlab私有仓库，我这里就不再啰嗦了。但是最近我发现很多小伙伴在群里问如何使用\ ``go module``\ 导入本地包，作为初学者大家刚开始接触package的时候肯定都是先在本地创建一个包，然后本地调用一下，然后就被卡住了。。。

这里就详细介绍下如何使用\ ``go module``\ 导入本地包。

1.前提
~~~~~~

假设我们现在有\ ``moduledemo``\ 和\ ``mypackage``\ 两个包，其中\ ``moduledemo``\ 包中会导入\ ``mypackage``\ 包并使用它的\ ``New``\ 方法。

``mypackage/mypackage.go``\ 内容如下：

.. code:: go

   package mypackage

   import "fmt"

   func New(){
       fmt.Println("mypackage.New")
   }

我们现在分两种情况讨论：

2.在同一个项目下
~~~~~~~~~~~~~~~~

2.1 目录结构
^^^^^^^^^^^^

::

   $ tree
   .
   ├── moduledemo
   │   ├── main.go
   │   └── mypackage
   │       └── mypackage.go
   |   ├── go.mod

2.2 导入包
^^^^^^^^^^

``go.mod``

::

   module moduledemo

   go 1.16

``moduledemo/mypackage/mypackage.go``

.. code:: go

   package mypackage

   import "fmt"

   func New() {
       fmt.Println("hello world.New....")
   }

``moduledemo/main.go``

.. code:: go

   package main

   import (
       "fmt"
       "moduledemo/mypackage"
   )

   func main() {
       mypackage.New()
       fmt.Println("main")
   }

2.3 举个例子
^^^^^^^^^^^^

举一反三，假设我们现在有文件目录结构如下：

::

   bubble
   ├── dao
   │   └── mysql.go
   ├── go.mod
   └── main.go

其中\ ``bubble/go.mod``\ 内容如下：

::

   module github.com/hujianli/bubble

   go 1.16

``bubble/dao/mysql.go``\ 内容如下：

::

   package dao

   import "fmt"

   func New(){
       fmt.Println("mypackage.New")
   }

``bubble/main.go``\ 内容如下

::

   package main

   import (
       "fmt"
       "github.com/hujianli/bubble"
   )
   func main() {
       dao.New()
       fmt.Println("main")
   }

3.不在同一个项目下
~~~~~~~~~~~~~~~~~~

.. _目录结构-1:

3.1 目录结构
^^^^^^^^^^^^

::

   ├── moduledemo
   │   ├── go.mod
   │   └── main.go
   └── mypackage
       ├── go.mod
       └── mypackage.go

.. _导入包-1:

3.2 导入包
^^^^^^^^^^

这个时候，\ ``mypackage``\ 也需要进行module初始化，即拥有一个属于自己的\ ``go.mod``\ 文件，内容如下：

::

   module mypackage

   go 1.16

然后我们在\ ``moduledemo/main.go``\ 中按如下方式导入：

.. code:: go

   import (
       "fmt"
       "mypackage"
   )
   func main() {
       mypackage.New()
       fmt.Println("main")
   }

因为这两个包不在同一个项目路径下，你想要导入本地包，并且这些包也没有发布到远程的github或其他代码仓库地址。这个时候我们就需要在\ ``go.mod``\ 文件中使用\ ``replace``\ 指令。

在调用方也就是\ ``moduledemo/go.mod``\ 中按如下方式指定使用相对路径来寻找\ ``mypackage``\ 这个包。

::

   module moduledemo

   go 1.16

   require "mypackage" v0.0.0
   replace "mypackage" => "../mypackage"

.. _举个例子-1:

3.3 举个例子
^^^^^^^^^^^^

最后我们再举个例子巩固下上面的内容。

我们现在有文件目录结构如下：

::

   ├── p1
   │   ├── go.mod
   │   └── main.go
   └── p2
       ├── go.mod
       └── p2.go

``p2/go.mod``\ 内容如下：

::

   module github.com/hujianli/p2

   go 1.16

``p1/main.go``\ 中按如下方式导入

.. code:: go

   package main

   import (
       "fmt"

       "github.com/hujianli/p2"
   )

   func main() {
       p2.New()
       fmt.Println("hello world")
   }

因为我并没有把\ ``github.com/hujianli/p2``\ 这个包上传到\ ``github.com``\ 这个网站，我们只是想导入本地的包，这个时候就需要用到\ ``replace``\ 这个指令了。

``p1/main.go``\ 中按如下方式导入

::

   module github.com/hujianli/p1

   go 1.16


   require "github.com/hujianli/p2" v0.0.0
   replace "github.com/hujianli/p2" => "../p2"

此时，我们就可以正常编译\ ``p1``\ 这个项目了。

说再多也没用，自己动手试试吧。

4.Golang强制更新第三方依赖版本
------------------------------

1. 删除go.sum
2. 删除go.mod中老依赖行
3. ``go mod tidy``\ 刷新

..

   参考文献:

   https://www.cnblogs.com/haiyux/p/15162661.html

   https://www.yuque.com/coolops/golang/pgwq4e
