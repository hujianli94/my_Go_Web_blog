.. contents::
   :depth: 3
..

简单Go Web服务器
================

.. code:: go

   package main

   import (
       "fmt"
       "log"
       "net/http"
   )

   func helloWorld(w http.ResponseWriter, r *http.Request) {
       fmt.Fprintf(w, "Hello Go Web!")
   }

   func main() {
       http.HandleFunc("/hello", helloWorld)
       if err := http.ListenAndServe(":8081", nil); err != nil {
           log.Fatal(err)
       }
   }

Go Web服务器请求和响应流程：

1. 客户端发送请求；
2. 服务器端的多路复用器收到请求；
3. 多路复用器根据请求的URL找到注册的处理器，转交请求给处理器；
4. 处理器执行程序逻辑，如必要，与数据库交互，得到处理结果；
5. 处理器调用模板引擎将指定模板和上一步结果渲染成客户端可识别的数据格式（通常HTML）；
6. 服务器将数据通过HTTP响应返回给客户端；
7. 客户端拿到数据，执行对应的操作（例如渲染出来呈现给用户）。

1.接收请求
----------

1.1 ServeMux和DefaultServeMux
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

1.ServeMux和DefaultServeMux简介
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

多路复用器用于转发请求到处理器。

结构体ServeMux中，包含URL到相应处理器的映射。它会根据请求URL找出最匹配的URL，然后调用对应处理器的ServeHTTP()方法来处理请求。

DefaultServeMux是ServeMux的一个实例，默认的多路复用器。

::

   var DefaultServeMux = &defaultServeMux
   var defaultServeMux ServeMux

::

   //为指定URL注册处理器
   func HandleFunc(pattern string, handler func(ResponseWrite, *Request)) {
       DefaultServeMux.HandleFunc(pattern, handler)
   }

::

   func Handle(pattern string, handler Handler) {
       DefaultServeMux.Handle(pattern, handler)
   }

::

   func (sh serverHandler) ServeHTTP(rw ResponseWriter, req *Request) {
       handler := sh.srv.Handler
       if handler == nil {
           handler = DefaultServeMux
       }
       handler.ServeHTTP(rw, req)
   }

.. code:: go

   package main

   import (
       "fmt"
       "net/http"
   )

   type handle1 struct{}

   func (h1 *handle1) ServeHTTP(w http.ResponseWriter, r *http.Request) {
       fmt.Fprintf(w, "hi, handle1")
   }

   type handle2 struct{}

   func (h2 *handle2) ServeHTTP(w http.ResponseWriter, r *http.Request) {
       fmt.Fprintf(w, "hi, handle2")
   }

   func main() {
       handle1 := handle1{}
       handle2 := handle2{}

       server := http.Server{
           Addr:    "0.0.0.0:8085",
           Handler: nil,
       }

       http.Handle("/handle1", &handle1)
       http.Handle("/handle2", &handle2)
       server.ListenAndServe()
   }

.. code:: go

   package main

   import (
       "fmt"
       "log"
       "net/http"
       "time"
   )

   func hi(w http.ResponseWriter, r *http.Request) {
       fmt.Fprintf(w, "hi, web")
   }

   func main() {
       mux := http.NewServeMux()
       mux.HandleFunc("/", hi)

       server := &http.Server{
           Addr:         "0.0.0.0:8081",
           Handler:      mux,
           ReadTimeout:  5 * time.Second,
           WriteTimeout: 5 * time.Second,
       }

       if err := server.ListenAndServe(); err != nil {
           log.Fatal(err)
       }
   }

2.ServeMux的URL路由匹配
^^^^^^^^^^^^^^^^^^^^^^^

.. code:: go

   package main

   import (
       "fmt"
       "log"
       "net/http"
   )

   func indexHandler(w http.ResponseWriter, r *http.Request) {
       fmt.Fprintf(w, "欢迎来到Go Web首页!处理器为:indexHandler!")
   }

   func hiHandler(w http.ResponseWriter, r *http.Request) {
       fmt.Fprintf(w, "欢迎来到Go Web首页!处理器为:hiHandler!")
   }

   func webHandler(w http.ResponseWriter, r *http.Request) {
       fmt.Fprintf(w, "欢迎来到Go Web首页!处理器为:webHandler!")
   }

   func main() {
       mux := http.NewServeMux()
       mux.HandleFunc("/", indexHandler)     // "/", "/hi/"
       mux.HandleFunc("/hi", hiHandler)      // "/hi"
       mux.HandleFunc("/hi/web", webHandler) // "/hi/web"

       server := &http.Server{
           Addr:    ":8083",
           Handler: mux,
       }

       if err := server.ListenAndServe(); err != nil {
           log.Fatal(err)
       }
   }

.. code:: go

   package main

   import (
       "fmt"
       "log"
       "net/http"
   )

   func hiHandler(w http.ResponseWriter, r *http.Request) {
       fmt.Fprintf(w, "Hi, Go HandleFunc")
   }

   type welcomeHandler struct {
       Name string
   }

   func (h welcomeHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
       fmt.Fprintf(w, "Hi, %s", h.Name)
   }

   func main() {
       mux := http.NewServeMux()
       mux.HandleFunc("/hi", hiHandler)
       mux.Handle("/welcome/goweb", welcomeHandler{Name: "test"})

       server := &http.Server{
           Addr:    ":8085",
           Handler: mux,
       }

       if err := server.ListenAndServe(); err != nil {
           log.Fatal(err)
       }
   }

3.HttpRouter简介
^^^^^^^^^^^^^^^^

使用变量实现URL模式匹配。

.. code:: go

   package main

   import (
       "log"
       "net/http"

       "github.com/julienschmidt/httprouter"
   )

   func Index(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
       w.Write([]byte("Index"))
   }

   func main() {
       router := httprouter.New()
       router.GET("/", Index)
       log.Fatal(http.ListenAndServe(":8082", router))
   }

\**URL包括两种匹配模式：/user/:name精确匹配、/employee/*name匹配所有的模式。*\*

.. code:: go

   package main

   import (
       "net/http"

       "github.com/julienschmidt/httprouter"
   )

   func main() {
       router := httprouter.New()
       router.GET("/MainData", func(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
           w.Write([]byte("default get"))
       })
       router.POST("/MainData", func(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
           w.Write([]byte("default post"))
       })
       //精确匹配
       router.GET("/user/name", func(w http.ResponseWriter, r *http.Request, p httprouter.Params) {
           w.Write([]byte("user name:" + p.ByName("name")))
       })
       //匹配所有
       router.GET("/employee/*name", func(w http.ResponseWriter, r *http.Request, p httprouter.Params) {
           w.Write([]byte("employee name:" + p.ByName("name")))
       })
       http.ListenAndServe(":8081", router)
   }

**Handler处理链处理不同二级域名**

.. code:: go

   package main

   import (
       "log"
       "net/http"
       "github.com/julienschmidt/httprouter"
   )

   type HostMap map[string]http.Handler

   func (hs HostMap) ServeHTTP(w http.ResponseWriter, r *http.Request) {
       //根据域名获取对应的Handler路由，然后调用处理（分发机制）
       if handler := hs[r.Host]; handler != nil {
           handler.ServeHTTP(w, r)
       } else {
           http.Error(w, "Forbidden", 403)
       }
   }

   func main() {
       userRouter := httprouter.New()
       userRouter.GET("/", func(w http.ResponseWriter, r *http.Request, p httprouter.Params) {
           w.Write([]byte("sub1"))
       })

       dataRouter := httprouter.New()
       dataRouter.GET("/", func(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
           w.Write([]byte("sub2"))
       })

       //分别用于处理不同的二级域名
       hs := make(HostMap)
       hs["sub1.localhost:8888"] = userRouter
       hs["sub2.localhost:8888"] = dataRouter

       log.Fatal(http.ListenAndServe(":8888", hs))
   }

httprouter提供了很方便的静态文件服务，可以把一个目录托管在服务器上，以供访问。

::

   router.ServeFiles("/static/*filepath",http.Dir("./"))

.. code:: go

   package main

   import (
       "log"
       "net/http"

       "github.com/julienschmidt/httprouter"
   )

   func main() {
       router := httprouter.New()
       //访问静态文件
       router.ServeFiles("/static/*filepath", http.Dir("./"))
       log.Fatal(http.ListenAndServe(":8086", router))
   }

httprouter
异常捕获，httprouter允许使用者，设置PanicHandler用于处理HTTP请求中发生的panic。

.. code:: go

   package main
    
   import (
       "fmt"
       "log"
       "net/http"
    
       "github.com/julienschmidt/httprouter"
   )
    
   func Index(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
       panic("error")
   }
    
   func main() {
       router := httprouter.New()
       router.GET("/", Index)
     //捕获异常
       router.PanicHandler = func(w http.ResponseWriter, r *http.Request, v interface{}) {
           w.WriteHeader(http.StatusInternalServerError)
           fmt.Fprintf(w, "error:%s", v)
       }
       log.Fatal(http.ListenAndServe(":8080", router))
   }

httprouter还有不少有用的小功能，比如对404进行处理，我们通过设置Router.NotFound来实现，我们看看Router这个结构体的配置，可以发现更多有用的功能。

.. code:: go

   type Router struct {
       //是否通过重定向，给路径自定加斜杠
       RedirectTrailingSlash bool
       //是否通过重定向，自动修复路径，比如双斜杠等自动修复为单斜杠
       RedirectFixedPath bool
       //是否检测当前请求的方法被允许
       HandleMethodNotAllowed bool
       //是否自定答复OPTION请求
       HandleOPTIONS bool
       //404默认处理
       NotFound http.Handler
       //不被允许的方法默认处理
       MethodNotAllowed http.Handler
       //异常统一处理
       PanicHandler func(http.ResponseWriter, *http.Request, interface{})
   }

1.2 处理器和处理器函数
~~~~~~~~~~~~~~~~~~~~~~

处理器是实现了Handler接口的结构。

::

   type Handler interface {
       func ServeHTTP(w ResponseWriter, r *Request)
   }

.. code:: go

   package main

   import (
       "fmt"
       "log"
       "net/http"
   )

   type WelcomeHandler struct {
       Language string
   }

   func (h WelcomeHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
       fmt.Fprintf(w, "%s", h.Language)
   }

   func main() {
       mux := http.NewServeMux()
       mux.Handle("/cn", WelcomeHandler{Language: "欢迎一起来学Go Web!"})
       mux.Handle("/en", WelcomeHandler{Language: "Welcome you, let's learn Go Web!"})

       server := &http.Server{
           Addr:    ":8082",
           Handler: mux,
       }

       if err := server.ListenAndServe(); err != nil {
           log.Fatal(err)
       }
   }

处理器函数实现了匿名函数func(w http.ResponseWriter, r \*http.Request)。

.. code:: go

   func (mux *ServeMux) HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request)) {
       if handler == nil {
           panic("http: nil handler")
       }
       mux.Handle(pattern, HandlerFunc(handler))
   }

.. code:: go

   type HandlerFunc func(w ResponseWriter, r *Request)
   func (f HandlerFunc) ServeHTTP(w ResponseWriter, r *Request) {
       f(w, r)
   }

1.3 串联处理器和处理器函数
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code:: go

   package main

   import (
       "fmt"
       "net/http"
       "reflect"
       "runtime"
   )

   func hello(w http.ResponseWriter, r *http.Request) {
       fmt.Fprintf(w, "Hello")
   }

   func log(h http.HandlerFunc) http.HandlerFunc {
       return func(w http.ResponseWriter, r *http.Request) {
           name := runtime.FuncForPC(reflect.ValueOf(h).Pointer()).Name()
           fmt.Println("Handler function called  - " + name)
           h(w, r)
       }
   }

   func main() {
       server := http.Server{
           Addr: "127.0.0.1:8080",
       }
       http.HandleFunc("/hello", log(hello))
       server.ListenAndServe()
   }

1.4 构建模型
~~~~~~~~~~~~

构建模型增删查改数据库。

.. code:: sql

   create table if not exists user (
       uid bigint auto_increment primary key,
       name varchar(20) default '' null,
       phone varchar(20) default '' null
   ) charset=utf8mb4 ;

.. code:: go

   package model

   import (
       "database/sql"
       "fmt"
       _ "github.com/go-sql-driver/mysql"
   )

   var DB *sql.DB

   type User struct {
       Uid   int
       Name  string
       Phone string
   }

   //初始化数据库连接
   func init()  {
       DB, _ = sql.Open("mysql",
           "root:123456@tcp(127.0.0.1:3306)/chapter3")
   }

   //获取用户信息
   func GetUser(uid int) (u User) {
       // 非常重要：确保QueryRow之后调用Scan方法，否则持有的数据库链接不会被释放
       err := DB.QueryRow("select uid, name, phone from `user` where uid=?", uid).Scan(&u.Uid, &u.Name, &u.Phone)
       if err != nil {
           fmt.Printf("scan failed, err:%v\n", err)
           return
       }
       return u
   }

1.5 生成HTML表单
~~~~~~~~~~~~~~~~

view/t3.html

.. code:: html

   <!DOCTYPE html>
   <html>
     <head>
       <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
       <title>Welcome to my page</title>
     </head>
     <body>
       <ul>
       {{range .}}
           <h1 style="text-align:center">{{.}}</h1>
       {{end}}
           <h1 style="text-align:center">Welcome to my page</h1>
           <p style="text-align:center">this is the user info page</p>
       </ul>
     </body>
   </html>

.. code:: go

   package controller

   import (
       "fmt"
       "gitee.com/shirdonl/goWebActualCombat/chapter3/model"
       "html/template"
       "net/http"
       "strconv"
   )

   type UserController struct {
   }

   func (c UserController) GetUser(w http.ResponseWriter, r *http.Request)  {
       query := r.URL.Query()
       uid, _ := strconv.Atoi(query["uid"][0])

       //此处调用模型从数据库中获取数据
       user := model.GetUser(uid)
       fmt.Println(user)

       t, _ := template.ParseFiles("view/t3.html")
       userInfo := []string{user.Name, user.Phone}
       t.Execute(w, userInfo)
   }

.. code:: go

   package main

   import (
       "gitee.com/shirdonl/goWebActualCombat/chapter3/controller"
       "log"
       "net/http"
   )

   func main() {
       http.HandleFunc("/getUser", controller.UserController{}.GetUser)
       if err := http.ListenAndServe(":8088", nil); err != nil {
           log.Fatal(err)
       }
   }
