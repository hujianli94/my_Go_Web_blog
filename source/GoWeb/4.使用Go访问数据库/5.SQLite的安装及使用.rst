.. role:: raw-latex(raw)
   :format: latex
..

.. contents::
   :depth: 3
..

SQLite的安装及使用
==================

SQLite是一个进程内的库，实现了自给自足的、无服务器的、零配置的、事务性的
SQL 数据库引擎。

1.SQLite的安装
--------------

下载地址：https://www.sqlite.org/download.html

1. 下载sqlite-dll-win64-x64-3360000.zip和sqlite-tools-win32-x86-3360000.zip文件
2. 启动sqlite3

2.SQLite基础入门
----------------

2.1 数据库管理
~~~~~~~~~~~~~~

::

   sqlite3 test.db -- 创建数据库
   .open test.db -- 创建数据库
    .databases -- 查看数据库
    .quit -- 退出
    sqlite3 testDB.db .dump > testDB.sql -- 导出数据库到txt文件
    sqlite3 testDB.db < testDB.sql -- txt文件导入数据库
    ATTACH DATABASE 'test.db' as 'TEST'; -- 附加数据库
    DETACH DATABASE 'TEST'; -- 分离数据库

2.2 数据表操作
~~~~~~~~~~~~~~

::

   -- 创建数据表
   CREATE TABLE database_name.table_name(
      column1 datatype  PRIMARY KEY(one or more columns),
      column2 datatype,
      column3 datatype,
      .....
      columnN datatype,
   );

   CREATE TABLE COMPANY(
      ID INT PRIMARY KEY     NOT NULL,
      NAME           TEXT    NOT NULL,
      AGE            INT     NOT NULL,
      ADDRESS        CHAR(50),
      SALARY         REAL
   );

   -- 查看数据表
    .tables
    
   -- 得到表的完整信息
   .schema COMPANY

   -- 删除数据表
   DROP TABLE database_name.table_name;
   DROP TABLE COMPANY;

2.3 数据库语句
~~~~~~~~~~~~~~

::

   -- 新增数据
   INSERT INTO TABLE_NAME [(column1, column2, column3,...columnN)]
   VALUES (value1, value2, value3,...valueN);

   INSERT INTO TABLE_NAME VALUES (value1,value2,value3,...valueN);

   INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY)
   VALUES (6, 'Kim', 22, 'South-Hall', 45000.00 );

   INSERT INTO COMPANY VALUES (7, 'James', 24, 'Houston', 10000.00 );

   -- 查询数据
   SELECT column1, column2, columnN FROM table_name;
   .header on
   .mode column
   SELECT * FROM COMPANY;
   SELECT ID, NAME, SALARY FROM COMPANY;
    
   #修改数据
   UPDATE table_name
   SET column1 = value1, column2 = value2...., columnN = valueN
   WHERE [condition];

   UPDATE COMPANY SET ADDRESS = 'Texas' WHERE ID = 6;
    UPDATE COMPANY SET ADDRESS = 'Texas', SALARY = 20000.00;


   #删除数据
   DELETE FROM table_name WHERE [condition];

   DELETE FROM COMPANY WHERE ID = 7;
   DELETE FROM COMPANY;

3.Go访问SQLite
--------------

安装msys2

配置gcc目录，set
Path=%Path%;C::raw-latex:`\msys64`:raw-latex:`\mingw64`:raw-latex:`\bin`

``go get github.com/mattn/go-sqlite3``

::

   sqlite3 test.db < test.sql

创建数据库和数据表

test.sql

::

   CREATE TABLE `user` (
       `uid` INT PRIMARY KEY NOT NULL,
       `name` TEXT NOT NULL,
       `phone` CHAR(50)
   );

   INSERT INTO `user` (`uid`, `name`, `phone`) VALUES (15, 'yx', '138888888');
   INSERT INTO `user` (`uid`, `name`, `phone`) VALUES (111, 'yx', '138888888');

3.1连接数据库
~~~~~~~~~~~~~

.. code:: go

   package main

   import (
       "database/sql"
       _ "github.com/mattn/go-sqlite3"
       "log"
   )

   func main() {
       db, err := sql.Open("sqlite3.exe", `D:\soft\sqlite\test.db`)
       if err != nil {
           log.Fatal(err)
       }
       defer db.Close()
   }

3.2初始化连接
~~~~~~~~~~~~~

.. code:: go

   package main

   import (
       "database/sql"
       "fmt"
       _ "github.com/mattn/go-sqlite3"
   )

   var db *sql.DB

   // 定义一个初始化数据库的函数
   func initDB() (err error) {
       //连接数据库
       db, err = sql.Open("sqlite3", `D:\soft\sqlite\test.db`)
       if err != nil {
           return err
       }
       // 尝试与数据库建立连接（校验dsn是否正确）
       err = db.Ping()
       if err != nil {
           return err
       }
       return nil
   }

   func main() {
       if err := initDB(); err != nil {
           fmt.Printf("init db failed, err: %v\n", err)
       }
   }

设置最大连接数 n<=0，无限制，默认0。 不会超过数据库默认配置。

.. code:: go

   func (db *DB) SetMaxOpenConns(n int)

设置最大闲置连接数 n<=0，无限制，默认0。 不会超过数据库默认配置。

.. code:: go

   func (db *DB) SetMaxOpenConns(n int)

3.3 SQL查询
~~~~~~~~~~~

QueryRow()单行查询
^^^^^^^^^^^^^^^^^^

.. code:: go

   func (db *DB) QueryRow(query string, args ...interface{}) *Row

.. code:: go

   package main

   import (
       "database/sql"
       "fmt"
       _ "github.com/mattn/go-sqlite3"
   )

   var db *sql.DB

   // 定义一个初始化数据库的函数
   func initDB() (err error) {
       //连接数据库
       db, err = sql.Open("sqlite3", `D:\soft\sqlite\test.db`)
       if err != nil {
           return err
       }
       // 尝试与数据库建立连接（校验dsn是否正确）
       err = db.Ping()
       if err != nil {
           return err
       }
       return nil
   }

   type User struct {
       Uid int
       Name string
       Phone string
   }

   func queryRow() {
       var u User;
       if err := db.QueryRow("select uid, name, phone from user where uid=?;", 111).Scan(&u.Uid, &u.Name, &u.Phone); err != nil {
           fmt.Printf("scan failed, err:%v\n", err)
           return
       }
       fmt.Printf("uid:%d name:%s phone:%s\n", u.Uid, u.Name, u.Phone)
   }

   func main() {
       if err := initDB(); err != nil {
           fmt.Printf("init db failed, err: %v\n", err)
       }
       queryRow()
   }

Query()多行查询
^^^^^^^^^^^^^^^

.. code:: go

   func (db *DB) Query(query string, args ...interface{}) (*Rows, error)

.. code:: go

   package main

   import (
       "database/sql"
       "fmt"
       _ "github.com/mattn/go-sqlite3"
   )

   var db *sql.DB

   // 定义一个初始化数据库的函数
   func initDB() (err error) {
       //连接数据库
       db, err = sql.Open("sqlite3", `D:\soft\sqlite\test.db`)
       if err != nil {
           return err
       }
       // 尝试与数据库建立连接（校验dsn是否正确）
       err = db.Ping()
       if err != nil {
           return err
       }
       return nil
   }

   type User struct {
       Uid int
       Name string
       Phone string
   }

   func queryMultiRow() {
       var u User;
       rows, err := db.Query("select uid, name, phone from user where uid>?;", 0)
       if err != nil {
           fmt.Printf("query failed, err:%v\n", err)
           return
       }
       defer rows.Close()

       for rows.Next() {
           err := rows.Scan(&u.Uid, &u.Name, &u.Phone)
           if err != nil {
               fmt.Printf("scan failed, err:%v\n", err)
               return
           }
           fmt.Printf("uid:%d name:%s phone:%s\n", u.Uid, u.Name, u.Phone)
       }
   }

   func main() {
       if err := initDB(); err != nil {
           fmt.Printf("init db failed, err: %v\n", err)
       }
       queryMultiRow()
   }

3.4 Exec()执行一次命令（增删改查）
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code:: go

   func (db *DB) Exec(query string, args ...interface{}) (Result, error)

.. code:: go

   package main

   import (
       "database/sql"
       "fmt"
       _ "github.com/mattn/go-sqlite3"
   )

   var db *sql.DB

   // 定义一个初始化数据库的函数
   func initDB() (err error) {
       //连接数据库
       db, err = sql.Open("sqlite3", `D:\soft\sqlite\test.db`)
       if err != nil {
           return err
       }
       // 尝试与数据库建立连接（校验dsn是否正确）
       err = db.Ping()
       if err != nil {
           return err
       }
       return nil
   }

   //插入数据
   func insertRow() {
       ret, err := db.Exec("insert into user(uid, name, phone) values(?, ?, ?);", 12, "ml", "15906693677")
       if err != nil {
           fmt.Printf("insert failed, err:%v\n", err)
           return
       }
       
       uid, err := ret.LastInsertId()
       if err != nil {
           fmt.Printf("get lastinsert ID failed, err:%v\n", err)
           return
       }
       fmt.Printf("insert success, the id is %d.\n", uid)
       
   }

   //更新数据
   func updateRow() {
       ret, err := db.Exec("update user set name=? where uid=?;", "tt", 12)
       if err != nil {
           fmt.Printf("update failed, err:%v\n", err)
           return
       }
       
       n, err := ret.RowsAffected()
       if err != nil {
           fmt.Printf("get lastinsert ID failed, err:%v\n", err)
           return
       }
       fmt.Printf("update success, affected rows:%d\n", n)
   }

   //删除数据
   func deleteRow() {
       ret, err := db.Exec("delete from user where uid=?;", 12)
       if err != nil {
           fmt.Printf("delete failed, err:%v\n", err)
           return
       }
       
       n, err := ret.RowsAffected()
       if err != nil {
           fmt.Printf("get lastinsert ID failed, err:%v\n", err)
           return
       }
       fmt.Printf("delete success, affected rows:%d\n", n)
   }

   func main() {
       if err := initDB(); err != nil {
           fmt.Printf("init db failed, err: %v\n", err)
       }
       insertRow()
       updateRow()
       deleteRow()
   }
