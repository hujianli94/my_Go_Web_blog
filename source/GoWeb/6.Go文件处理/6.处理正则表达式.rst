.. contents::
   :depth: 3
..

处理正则表达式
==============

1.正则表达式简介
----------------

正则表达式特点：

1. 灵活性、逻辑性和功能性非常强。
2. 简单方式实现字符串的复杂控制。
3. 晦涩难懂。

正则表达式提高文本处理能力，用于表单输入验证、文本提取、数据分析等。

正则表达式由普通字符（\ ``a~z``\ 、\ ``A~Z``\ 、\ ``0~9``\ 等）和特殊字符（元字符）组成。

2.使用Go正则表达式
------------------

参考标准库文档：

https://studygolang.com/pkgdoc

https://zhuanlan.zhihu.com/p/396375666

2.1 regexp包的常用函数
~~~~~~~~~~~~~~~~~~~~~~

1.获取正则对象
^^^^^^^^^^^^^^

.. code:: go

   func Compile(expr string) (*Regexp, error)
   func MustCompile(str string) *Regexp

``MustCompile()``\ 函数失败会宕机。

::

   reg, err := regexp.Compile(`\d+`)
   reg := regexp.MustCompile(`\d+`)

2.匹配检测
^^^^^^^^^^

.. code:: go

   func (re *Regexp) MatchString(s string) bool
   func (re *Regexp) Match(b []byte) bool

.. code:: go

   package main

   import (
       "fmt"
       "regexp"
   )

   func main() {
       text := "Hello Gopher, Hello Go Web"
       reg := regexp.MustCompile(`\w+`)
       fmt.Println(reg.MatchString(text)) //true

       match, _ := regexp.MatchString("H(.*)d!", "Hello World!")
       fmt.Println(match) //true

       match, _ = regexp.Match("H(.*)d!", []byte("Hello World!"))
       fmt.Println(match) //true

       r, _ := regexp.Compile("H(.*)d!")
       fmt.Println(r.MatchString("Hello World!")) //true

   }

.. code:: go

   package main

   import (
       "fmt"
       "regexp"
   )

   func main() {
       re := regexp.MustCompile(`who(o*)a(a|m)i`)
       fmt.Printf("%q\n", re.FindStringSubmatch("-whooooaai-")) //["whooooaai" "ooo" "a"]
       fmt.Printf("%q\n", re.FindStringSubmatch("-whoami-"))    //["whoami" "" "m"]

       //
       //re := regexp.MustCompile(`w(a*)i`)
       //fmt.Printf("%q\n", re.FindAllStringSubmatch("-wi-", -1))
       //fmt.Printf("%q\n", re.FindAllStringSubmatch("-waaai-", -1))
       //fmt.Printf("%q\n", re.FindAllStringSubmatch("-wi-wai-", -1))
       //fmt.Printf("%q\n", re.FindAllStringSubmatch("-waaaaai-wi-", -1))

       //re := regexp.MustCompile(`wh(|o)`)
       //fmt.Println(re.FindString("who"))
       //re.Longest()
       //fmt.Println(re.FindString("who"))

       //re := regexp.MustCompile(`w(a*)i`)
       //re.Longest()
       //fmt.Println(re.FindString("-waaaaai-wi-")) // waaaaai，不会存在第一个w和最后一个i组合的过程。

       //re1 := regexp.MustCompile(`w.`)
       //fmt.Printf("%d\n", re1.NumSubexp())
       //
       //re2 := regexp.MustCompile(`(.*)((w)eb)(.*)w`)
       //fmt.Println(re2.NumSubexp())

       //re := regexp.MustCompile(`w(a*)i`)
       //fmt.Printf("%s\n", re.ReplaceAll([]byte("-wi-waaaaai-"), []byte("T")))
       //// $1表示匹配的第一个子串，这是wi的中间无字符串，所以$1为空，然后使用空去替换满足正则表达式的部分。
       //fmt.Printf("%s\n", re.ReplaceAll([]byte("-wi-waaaaai-"), []byte("$1")))
       //// "$1W"等价与"$(1W)"，值为空，将满足条件的部分完全替换为空。
       //fmt.Printf("%s\n", re.ReplaceAll([]byte("-wi-waaaaai-"), []byte("$1W")))
       //// ${1}匹配(x*)，保留
       //fmt.Printf("%s\n", re.ReplaceAll([]byte("-wi-waaaaai-"), []byte("${1}W")))

       //s := "Hello Gopher, let's go!"
       ////定义一个正则表达式reg，匹配Hello或者Go
       //reg := regexp.MustCompile(`(Hell|G)o`)
       //
       //s2 := "2020-08-01,this is a test"
       ////定义一个正则表达式reg2,匹配 YYYY-MM-DD 的日期格式
       //reg2 := regexp.MustCompile(`(\d{4})-(\d{2})-(\d{2})`)
       //
       ////最简单的情况，用“T替换”"-ab-axxb-"中符合正则"a(x*)b"的部分
       //reg3 := regexp.MustCompile("w(a*)i")
       //fmt.Println(reg3.ReplaceAllString("-wi-waai-", "T"))
       //
       ////${1}匹配"2020-08-01,this is a test"中符合正则`(Hell|G)`的部分并保留，去掉"Hello"与"Go"中的'o'并用"hi"追加
       //rep1 := "${1}hi"
       //fmt.Printf("%q\n", reg.ReplaceAllString(s, rep1))
       //
       ////首先，"2020-08-01,this is a test"中符合正则表达式`(\d{4})-(\d{2})-(\d{2})`的部分是"2020-08-01",将该部分匹配'(\d{4})'的'2020'保留，去掉剩余部分
       //rep2 := "${1}"
       //fmt.Printf("%q\n", reg2.ReplaceAllString(s2,rep2))
       //
       ////首先，"2020-08-01,this is a test"中符合正则表达式`(\d{4})-(\d{2})-(\d{2})`的部分是"2020-08-01",将该部分匹配'(\d{2})'的'08'保留，去掉剩余部分
       //rep3 := "${2}"
       //fmt.Printf("%q\n", reg2.ReplaceAllString(s2,rep3))
       //
       ////首先，"2020-08-01,this is a test"中符合正则表达式`(\d{4})-(\d{2})-(\d{2})`的部分是"2020-08-01",将该部分匹配'(\d{2})'的'01'保留，去掉剩余部分,并追加"13:30:12"
       //rep4 := "${3}:15:25:12"
       //fmt.Printf("%q\n", reg2.ReplaceAllString(s2,rep4))

   }

3.查找
^^^^^^

.. code:: go

   func (re *Regexp) FindString(s string) string       //返回左侧第一个匹配结果。

.. code:: go

   func (re *Regexp) FindAllString(s string, n int) []string   //n限定查找数量，-1不限制。

.. code:: go

   package main

   import (
       "fmt"
       "regexp"
   )

   func main() {
       text := "Hello Gopher, Hello Go Web"
       reg := regexp.MustCompile(`\w+`)
       fmt.Println(reg.FindAllString(text, -1))

   }

.. code:: go

   func (re *Regexp) FindAll(b []byte, n int) [][]byte

.. code:: go

   func (re *Regexp) FindStringSubmatch(s string) []string 
   //FindStringSubmatch返回一段字符串，其中包含s中正则表达式的最左侧匹配项以及的匹配项

.. code:: go

   package main

   import (
       "fmt"
       "regexp"
   )

   func main() {
       // re := regexp.MustCompile(`[^eovbgramin]`)
       // fmt.Println(re.ReplaceAllStringFunc("I love Go web programming", strings.ToUpper))

       // re := regexp.MustCompile(`w(a*)i`)
       // fmt.Println(re.ReplaceAllLiteralString("-wi-waai-", "T"))
       // fmt.Println(re.ReplaceAllLiteralString("-wi-waai-", "$1"))
       // fmt.Println(re.ReplaceAllLiteralString("-wi-waai-", "${1}"))

       reg := regexp.MustCompile(`^http://blog.sina.com.cn/([\d]{4})/([\d]{2})/([\d]{2})/([\w-]+).html$`)
       params := reg.FindStringSubmatch("http://blog.sina.com.cn/2020/08/20/blog_dfcfef2f0102yyd1.html")
       // 返回[]string{}数据类型
       for _, param := range params {
           fmt.Println(param)
       }
   }

.. code:: go

   package main

   import (
       "fmt"
       "regexp"
   )

   func main() {
       text := `Hi,Gopher,Enjoy learning Go Web,加油！`

       // 查找连续的小写字母
       reg := regexp.MustCompile(`[a-z]+`)
       fmt.Printf("%q\n", reg.FindAllString(text, -1))

       // 查找连续的非小写字母
       reg = regexp.MustCompile(`[^a-z]+`)
       fmt.Printf("%q\n", reg.FindAllString(text, -1))

       // 查找连续的单词字母
       reg = regexp.MustCompile(`[\w]+`)
       fmt.Printf("%q\n", reg.FindAllString(text, -1))

       // 查找连续的非单词字母、非空白字符
       reg = regexp.MustCompile(`[^\w\s]+`)
       fmt.Printf("%q\n", reg.FindAllString(text, -1))

       // 查找连续的大写字母
       reg = regexp.MustCompile(`[[:upper:]]+`)
       fmt.Printf("%q\n", reg.FindAllString(text, -1))

       // 查找连续的非 ASCII 字符
       reg = regexp.MustCompile(`[[:^ascii:]]+`)
       fmt.Printf("%q\n", reg.FindAllString(text, -1))

       // 查找连续的标点符号
       reg = regexp.MustCompile(`[\pP]+`)
       fmt.Printf("%q\n", reg.FindAllString(text, -1))

       // 查找连续的非标点符号字符
       reg = regexp.MustCompile(`[\PP]+`)
       fmt.Printf("%q\n", reg.FindAllString(text, -1))

       // 查找连续的汉字
       reg = regexp.MustCompile(`[\p{Han}]+`)
       fmt.Printf("%q\n", reg.FindAllString(text, -1))

       // 查找连续的非汉字字符
       reg = regexp.MustCompile(`[\P{Han}]+`)
       fmt.Printf("%q\n", reg.FindAllString(text, -1))

       // 查找 Hello 或 Go
       reg = regexp.MustCompile(`Hello|Go`)
       fmt.Printf("%q\n", reg.FindAllString(text, -1))

       // 查找行首以 H 开头，以空格结尾的字符串
       reg = regexp.MustCompile(`^H.*\s`)
       fmt.Printf("%q\n", reg.FindAllString(text, -1))

       // 查找行首以 H 开头，以空白结尾的字符串（非贪婪模式）
       reg = regexp.MustCompile(`(?U)^H.*\s`)
       fmt.Printf("%q\n", reg.FindAllString(text, -1))

       // 查找以 hello 开头（忽略大小写），以 Go 结尾的字符串
       reg = regexp.MustCompile(`(?i:^hello).*Go`)
       fmt.Printf("%q\n", reg.FindAllString(text, -1))

       // 查找 Go.
       reg = regexp.MustCompile(`\QGo.\E`)
       fmt.Printf("%q\n", reg.FindAllString(text, -1))

       // 查找从行首开始，以空格结尾的字符串（非贪婪模式）
       reg = regexp.MustCompile(`(?U)^.* `)
       fmt.Printf("%q\n", reg.FindAllString(text, -1))

       // 查找以空格开头，到行尾结束，中间不包含空格字符串
       reg = regexp.MustCompile(` [^ ]*$`)
       fmt.Printf("%q\n", reg.FindAllString(text, -1))

       // 查找“单词边界”之间的字符串
       reg = regexp.MustCompile(`(?U)\b.+\b`)
       fmt.Printf("%q\n", reg.FindAllString(text, -1))

       // 查找连续 1 次到 4 次的非空格字符，并以 o 结尾的字符串
       reg = regexp.MustCompile(`[^ ]{1,4}o`)
       fmt.Printf("%q\n", reg.FindAllString(text, -1))

       // 查找 Hello 或 Go
       reg = regexp.MustCompile(`(?:Hell|G)o`)
       fmt.Printf("%q\n", reg.FindAllString(text, -1))

       // 查找 Hello 或 Go，替换为 Hellooo、Gooo
       reg = regexp.MustCompile(`(?:o)`)
       fmt.Printf("%q\n", reg.ReplaceAllString(text, "${n}ooo"))

       // 交换 Hello 和 Go
       reg = regexp.MustCompile(`(Hello)(.*)(Go)`)
       fmt.Printf("%q\n", reg.ReplaceAllString(text, "$3$2$1"))

       // 特殊字符的查找
       reg = regexp.MustCompile(`[\f\t\n\r\v\123\x7F\x{10FFFF}\\\^\$\.\*\+\?\{\}\(\)\[\]\|]`)
       fmt.Printf("%q\n", reg.ReplaceAllString("\f\t\n\r\v\123\x7F\U0010FFFF\\^$.*+?{}()[]|", "-"))
   }

4.查找匹配位置
^^^^^^^^^^^^^^

5.替换
^^^^^^

.. code:: go

   package main

   import (
       "fmt"
       "regexp"
   )

   func main() {
       re := regexp.MustCompile(`Go(\w+)`)
       fmt.Println(re.ReplaceAllString("Hello Gopher,Hello GoLang", "Java$1")) //Hello Javapher,Hello JavaLang

       text := "Hello Gopher,Hello Go Web"
       reg := regexp.MustCompile(`\w+`)
       fmt.Println(reg.MatchString(text)) //true

   }

6.分割
^^^^^^

.. code:: go

   package main

   import (
       "fmt"
       "strings"
   )

   func main() {
       s := "I_Love_Go_Web"
       res := strings.Split(s, "_")
       for key, value := range res {
           fmt.Printf("key:%d value:%s\n", key, value)
       }
   }

   /*
   key:0 value:I
   key:1 value:Love
   key:2 value:Go
   key:3 value:Web
   */

.. code:: go

   package main

   import (
       "fmt"
       "strings"
   )

   func main() {
       value := "a|b|c|d"
       // 分割成3部分
       result := strings.SplitN(value, "|", 3)
       for v := range result {
           fmt.Println(result[v])
       }
   }

   /*
   a
   b
   c|d
   */

.. code:: go

   package main

   import (
       "fmt"
       "strings"
   )

   func main() {
       s := "I_Love_Go_Web"
       res := strings.Split(s, "_")
       for i := range res {
           fmt.Println(res[i])
       }
       res1 := strings.SplitN(s, "_", 2)
       for i := range res1 {
           fmt.Println(res1[i])
       }
       res2 := strings.SplitAfter(s, "_")
       for i := range res2 {
           fmt.Println(res2[i])
       }
       res3 := strings.SplitAfterN(s, "_", 2)
       for i := range res3 {
           fmt.Println(res3[i])
       }
   }

.. code:: go

   package main

   import (
       "fmt"
       "strings"
   )

   func main() {
       value := "i'm gopher"
       result := strings.SplitAfter(value, "")
       for i := range result {
           // 获取字母
           letter := result[i]
           fmt.Println(letter)
       }
   }

3. regexp包的应用示例
---------------------

``phone.go``

.. code:: go

   package main

   import (
       "fmt"
       "regexp"
   )

   func main() {
       res2 := findPhoneNumber("13688888888")
       fmt.Println(res2) // true

       res2 = findPhoneNumber("02888888888")
       fmt.Println(res2) // false

       res2 = findPhoneNumber("123456789")
       fmt.Println(res2) // false
   }

   func findPhoneNumber(str string) bool {
       // 创建一个正则表达式匹配规则对象
       reg := regexp.MustCompile("^1[1-9]{10}")
       // 利用正则表达式匹配规则对象匹配指定字符串
       res := reg.FindAllString(str, -1)
       if res == nil {
           return false
       }
       return true
   }

``email.go``

.. code:: go

   package main

   import (
       "fmt"
       "regexp"
   )

   func main() {
       res := findEmail("8888@qq.com")
       fmt.Println(res) // true

       res = findEmail("shir?don@qq.com")
       fmt.Println(res) // false

       res = findEmail("8888@qqcom")
       fmt.Println(res) // false
   }
   func findEmail(str string) bool {
       reg := regexp.MustCompile("^[a-zA-Z0-9_]+@[a-zA-Z0-9]+\\.[a-zA-Z0-9]+")
       res := reg.FindAllString(str, -1)
       if res == nil {
           return false
       }
       return true
   }

4. 根据正则表达式生成代码
-------------------------

在线版

https://regex101.com/
