.. contents::
   :depth: 3
..

处理正则表达式
==============

1.正则表达式简介
----------------

正则表达式特点：

1. 灵活性、逻辑性和功能性非常强。
2. 简单方式实现字符串的复杂控制。
3. 晦涩难懂。

正则表达式提高文本处理能力，用于表单输入验证、文本提取、数据分析等。

正则表达式由普通字符（\ ``a~z``\ 、\ ``A~Z``\ 、\ ``0~9``\ 等）和特殊字符（元字符）组成。

2.使用Go正则表达式
------------------

参考标准库文档：

https://studygolang.com/pkgdoc

https://zhuanlan.zhihu.com/p/396375666

2.1 regexp包的常用函数
~~~~~~~~~~~~~~~~~~~~~~

1.获取正则对象
^^^^^^^^^^^^^^

.. code:: go

   func Compile(expr string) (*Regexp, error)
   func MustCompile(str string) *Regexp

MustCompile()函数失败会宕机。

::

   reg, err := regexp.Compile(`\d+`)
   reg := regexp.MustCompile(`\d+`)

2.匹配检测
^^^^^^^^^^

.. code:: go

   func (re *Regexp) MatchString(s string) bool
   func (re *Regexp) Match(b []byte) bool

.. code:: go

   package main

   import (
       "fmt"
       "regexp"
   )

   func main() {
       text := "Hello Gopher, Hello Go Web"
       reg := regexp.MustCompile(`\w+`)
       fmt.Println(reg.MatchString(text)) //true

       match, _ := regexp.MatchString("H(.*)d!", "Hello World!")
       fmt.Println(match) //true

       match, _ = regexp.Match("H(.*)d!", []byte("Hello World!"))
       fmt.Println(match) //true

       r, _ := regexp.Compile("H(.*)d!")
       fmt.Println(r.MatchString("Hello World!")) //true

   }

3.查找
^^^^^^

.. code:: go

   func (re *Regexp) FindString(s string) string       //返回左侧第一个匹配结果。

.. code:: go

   func (re *Regexp) FindAllString(s string, n int) []string   //n限定查找数量，-1不限制。

.. code:: go

   package main

   import (
       "fmt"
       "regexp"
   )

   func main() {
       text := "Hello Gopher, Hello Go Web"
       reg := regexp.MustCompile(`\w+`)
       fmt.Println(reg.FindAllString(text, -1))

   }

.. code:: go

   func (re *Regexp) FindAll(b []byte, n int) [][]byte

……

（4）查找匹配位置 （5）替换 （6）分割

3. regexp包的应用示例
---------------------

``phone.go``

.. code:: go

   package main

   import (
       "fmt"
       "regexp"
   )

   func main() {
       res2 := findPhoneNumber("13688888888")
       fmt.Println(res2) // true

       res2 = findPhoneNumber("02888888888")
       fmt.Println(res2) // false

       res2 = findPhoneNumber("123456789")
       fmt.Println(res2) // false
   }

   func findPhoneNumber(str string) bool {
       // 创建一个正则表达式匹配规则对象
       reg := regexp.MustCompile("^1[1-9]{10}")
       // 利用正则表达式匹配规则对象匹配指定字符串
       res := reg.FindAllString(str, -1)
       if res == nil {
           return false
       }
       return true
   }

``email.go``

.. code:: go

   package main

   import (
       "fmt"
       "regexp"
   )

   func main() {
       res := findEmail("8888@qq.com")
       fmt.Println(res) // true

       res = findEmail("shir?don@qq.com")
       fmt.Println(res) // false

       res = findEmail("8888@qqcom")
       fmt.Println(res) // false
   }
   func findEmail(str string) bool {
       reg := regexp.MustCompile("^[a-zA-Z0-9_]+@[a-zA-Z0-9]+\\.[a-zA-Z0-9]+")
       res := reg.FindAllString(str, -1)
       if res == nil {
           return false
       }
       return true
   }

4. 根据正则表达式生成代码
-------------------------

在线版

https://regex101.com/
